{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","_ref","liked","allPosts","React","createElement","className","SearchPanel","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","term","onUpdateSearch","bind","_assertThisInitialized","_inherits","_createClass","key","value","e","target","setState","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","_this2","map","_this2$props","filter","onFilterSelect","clazz","concat","onClick","PostListItem","apply","arguments","_this$props","onDelete","onToggleImportant","onToggleLiked","like","check","onToggleCheck","classNames","important","PostList","posts","elements","item","id","itemProps","_objectWithoutProperties","Object","assign","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","deleteItem","addItem","maxId","index","findIndex","elem","_toConsumableArray","slice","body","newItem","_ref2","_ref3","old","_objectSpread","_ref4","_ref5","items","length","indexOf","_this$state","visiblePosts","filterPost","searchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97a62fb4.chunk.js","sourcesContent":["import AppHeader from './app-header'\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css'\r\n\r\n// Компонент AppHeader отображает заголовок приложения и информацию о количестве постов и лайков\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return (\r\n        <div className='app-header d-flex'>\r\n            <h1>\r\n                Sisesta oma nimi siia\r\n            </h1>\r\n            <h2>{allPosts} plaadid, meeldisid {liked}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader;\r\n","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, {Component} from \"react\";\r\n\r\nimport './search-panel.css';\r\n\r\n// Компонент SearchPanel для поиска по записям\r\nexport default class SearchPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '' // Хранит текущий поисковый термин\r\n        }\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this); // Привязываем контекст метода\r\n    }\r\n\r\n    // Обновляет поисковый термин и передает его родительскому компоненту\r\n    onUpdateSearch(e) {\r\n        const term = e.target.value; // Получаем значение из поля ввода\r\n        this.setState({term}); // Обновляем состояние\r\n        this.props.onUpdateSearch(term); // Вызываем функцию родительского компонента\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                className='form-control search-input'\r\n                type='text'\r\n                placeholder='Otsi kirjete järgi' // Текст подсказки\r\n                value={this.state.term} // Привязываем значение к состоянию\r\n                onChange={this.onUpdateSearch} // Обработчик изменения\r\n            />\r\n        )\r\n    }\r\n}\r\n","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './post-status-filter.css';\r\n\r\n// Компонент PostStatusFilter отображает кнопки фильтрации постов\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Определяем кнопки фильтрации\r\n        this.buttons = [\r\n            {name: 'all', label: 'Kõik'}, // Кнопка для отображения всех постов\r\n            {name: 'like', label: 'Meeldis'} // Кнопка для отображения только лайкнутых постов\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        // Создаем кнопки на основе массива buttons\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const {filter, onFilterSelect} = this.props;\r\n            const active = filter === name; // Проверяем, является ли кнопка активной\r\n            const clazz = active ? 'btn-info' : 'btn-outline-secondary'; // Определяем класс для кнопки\r\n\r\n            return (\r\n                <button type='button'\r\n                    className={`btn ${clazz}`} // Применяем соответствующий класс\r\n                    key={name}\r\n                    onClick={() => onFilterSelect(name)}>\r\n                    {label}\r\n                </button>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className='btn-group'>\r\n                {buttons} {/* Отображаем кнопки фильтрации */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PostListItem from './post-list-item';\r\nexport default PostListItem;","import React, { Component } from 'react';\r\n\r\nimport './post-list-item.css';\r\n\r\n// Компонент PostListItem отображает отдельный элемент списка постов\r\nexport default class PostListItem extends Component {\r\n\r\n    render() {\r\n        // Деструктурируем пропсы\r\n        const { label, onDelete, onToggleImportant, onToggleLiked, like, check, onToggleCheck, important } = this.props;\r\n        let classNames = 'app-list-item d-flex justify-content-between';\r\n\r\n        // Добавляем классы в зависимости от состояния поста\r\n        if (important) {\r\n            classNames += ' important';\r\n        }\r\n\r\n        if (check) {\r\n            classNames += ' check';\r\n        }\r\n\r\n        if (like) {\r\n            classNames += ' like';\r\n        }\r\n\r\n        return (\r\n            <div className={classNames}>\r\n                <span\r\n                    className='app-list-item-label'\r\n                    onClick={onToggleLiked} // Обработчик клика для лайка\r\n                >\r\n                    {label}\r\n                </span>\r\n                <div className='d-flex justify-content-center align-items-center'>\r\n                    <button\r\n                        type='button'\r\n                        className='btn-star btn-sm'\r\n                        onClick={onToggleImportant} // Обработчик переключения важности\r\n                    >\r\n                        <i className='fa fa-star'></i>\r\n                    </button>\r\n                    <button\r\n                        type='button'\r\n                        className='btn-trash btn-sm'\r\n                        onClick={onDelete} // Обработчик удаления поста\r\n                    >\r\n                        <i className='fa fa-trash-o'></i>\r\n                    </button>\r\n                    <button\r\n                        type='button'\r\n                        className='btn-check btn-sm'\r\n                        onClick={onToggleCheck} // Обработчик переключения статуса \"проверено\"\r\n                    >\r\n                        <i className=\"fa fa-check\"></i>\r\n                    </button>\r\n                    <i className='fa fa-heart'></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PostList from './post-list';\r\nexport default PostList;","import React from 'react';\r\n\r\nimport PostListItem from '../post-list-item';\r\nimport './post-list.css';\r\n\r\n// Компонент PostList отображает список постов\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleCheck, onToggleLiked}) => {\r\n\r\n    // Создает элементы списка постов, передавая необходимые пропсы каждому PostListItem\r\n    const elements = posts.map((item) => {\r\n        const {id, ...itemProps} = item; // Деструктурируем id и остальные свойства поста\r\n        return (\r\n            <li key={id} className='list-group-item'>\r\n                <PostListItem\r\n                    {...itemProps}\r\n                    onDelete={() => onDelete(id)} // Обработчик удаления поста\r\n                    onToggleImportant={() => onToggleImportant(id)} // Обработчик переключения важности\r\n                    onToggleCheck={() => onToggleCheck(id)} // Обработчик переключения статуса \"проверено\"\r\n                    onToggleLiked={() => onToggleLiked(id)} // Обработчик переключения лайка\r\n                />\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ul className='app-list list-group'>\r\n            {elements} {/* Отображает элементы списка постов */}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default PostList;\r\n","import PostAddForm from './post-add-form';\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\n\r\nimport './post-add-form.css';\r\n\r\nexport default class PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: '' // Хранит текст нового поста\r\n        };\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    // Обрабатывает изменение значения в текстовом поле\r\n    onValueChange(e) {\r\n        this.setState({\r\n            text: e.target.value // Обновляет состояние текстового поля\r\n        });\r\n    }\r\n\r\n    // Обрабатывает отправку формы\r\n    onSubmit(e) {\r\n        e.preventDefault(); // Предотвращает перезагрузку страницы\r\n        this.props.onAdd(this.state.text); // Передает текст нового поста в родительский компонент\r\n        this.setState({\r\n            text: '' // Очищает текстовое поле после отправки\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                className='bottom-panel d-flex'\r\n                onSubmit={this.onSubmit}>\r\n                <input\r\n                    type='text'\r\n                    placeholder='Millest sa praegu mõtled?'\r\n                    className='form-control new-post-label'\r\n                    onChange={this.onValueChange}\r\n                    value={this.state.text}\r\n                />\r\n                <button\r\n                    type='submit'\r\n                    className='btn btn-outline-secondary'>\r\n                    Lisa\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import App from './app'\r\nexport default App;","import React, {Component} from 'react';\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form';\r\n\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                {label: 'Going to learn React', important: true, like: false, check: true, id: 1},\r\n                {label: 'That is so good', important: false, like: false, check: false, id: 2},\r\n                {label: 'I need a break...', important: false, like: false, check: false, id: 3}\r\n            ],\r\n            term: '',\r\n            filter: 'all'\r\n        };\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleCheck = this.onToggleCheck.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n        this.maxId = 4;\r\n    }\r\n\r\n    // Удаляет элемент из списка по указанному id\r\n    deleteItem(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            const newArr = [...data.slice(0, index), ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    // Добавляет новый элемент в список с указанным текстом\r\n    addItem(body) {\r\n        const newItem = {\r\n            label: body,\r\n            important: false,\r\n            id: this.maxId++\r\n        }\r\n        this.setState(({data}) => {\r\n            const newArr = [...data, newItem];\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    // Переключает статус важности элемента по указанному id\r\n    onToggleImportant(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            const old = data[index];\r\n            const newItem = {...old, important: !old.important};\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    // Переключает статус \"проверено\" элемента по указанному id\r\n    onToggleCheck(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            const old = data[index];\r\n            const newItem = {...old, check: !old.check};\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    // Переключает статус \"лайка\" элемента по указанному id\r\n    onToggleLiked(id) {\r\n        this.setState(({data}) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n\r\n            const old = data[index];\r\n            const newItem = {...old, like: !old.like};\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\r\n            return {\r\n                data: newArr\r\n            }\r\n        });\r\n    }\r\n\r\n    // Фильтрует элементы по поисковому терму\r\n    searchPost(items, term) {\r\n        if (term.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter((item) => {\r\n            return item.label.indexOf(term) > -1;\r\n        });\r\n    }\r\n\r\n    // Фильтрует элементы по выбранному фильтру (например, по лайкам)\r\n    filterPost(items, filter) {\r\n        if (filter === 'like') {\r\n            return items.filter(item => item.like);\r\n        } else {\r\n            return items;\r\n        }\r\n    }\r\n\r\n    // Обновляет терм поиска в состоянии\r\n    onUpdateSearch(term) {\r\n        this.setState({term});\r\n    }\r\n\r\n    // Устанавливает выбранный фильтр в состоянии\r\n    onFilterSelect(filter) {\r\n        this.setState({filter});\r\n    }\r\n\r\n    render() {\r\n        const {data, term, filter} = this.state;\r\n\r\n        const liked = data.filter((item) => item.like).length;\r\n        const allPosts = data.length;\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter);\r\n        return (\r\n            <div className='app'>\r\n                <AppHeader liked={liked} allPosts={allPosts}/>\r\n                <div className='search-panel d-flex'>\r\n                    <SearchPanel\r\n                        onUpdateSearch={this.onUpdateSearch}/>\r\n                    <PostStatusFilter\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect}/>\r\n                </div>\r\n                <PostList\r\n                    posts={visiblePosts}\r\n                    onDelete={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleLiked={this.onToggleLiked}\r\n                    onToggleCheck={this.onToggleCheck}/>\r\n                <PostAddForm\r\n                    onAdd={this.addItem}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './components/app/';\r\n\r\n// Рендерим компонент App в элемент с id 'root'\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}